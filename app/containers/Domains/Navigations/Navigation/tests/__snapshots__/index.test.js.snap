// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Navigation /> <Navigation /> snap Shots renders as expected with populated messages 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {
        "Navigation": [Function],
      },
      "injectedSagas": Object {
        "Navigation": Object {
          "mode": "@@saga-injector/restart-on-remount",
          "saga": [Function],
          "task": Object {
            "@@redux-saga/TASK": true,
            "cancel": [Function],
            "cont": undefined,
            "done": Promise {},
            "error": [Function],
            "id": 1,
            "isAborted": [Function],
            "isCancelled": [Function],
            "isRunning": [Function],
            "joiners": Array [],
            "name": "rootSaga",
            "result": [Function],
            "setContext": [Function],
          },
        },
      },
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <withReducer(withSaga(Connect(Navigation)))>
    <withSaga(Connect(Navigation))>
      <Connect(Navigation)>
        <Navigation
          isDrawerOpen={false}
          navigationLinks={
            Array [
              Object {
                "DisplayName": "About Me",
                "LinkTo": "/",
                "key": "AboutMe",
              },
              Object {
                "DisplayName": "Portfolio",
                "LinkTo": "/portfolio",
                "key": "Portfolio",
              },
              Object {
                "DisplayName": "Contact",
                "LinkTo": "/contact",
                "key": "Contact",
              },
              Object {
                "DisplayName": "Messages",
                "LinkTo": "/messages",
                "key": "Messages",
              },
            ]
          }
          selectItem={[Function]}
          toggleDrawer={[Function]}
        >
          <div>
            <NavigationBody
              isDrawerOpen={false}
              navigationLinks={
                Array [
                  Object {
                    "DisplayName": "About Me",
                    "LinkTo": "/",
                    "key": "AboutMe",
                  },
                  Object {
                    "DisplayName": "Portfolio",
                    "LinkTo": "/portfolio",
                    "key": "Portfolio",
                  },
                  Object {
                    "DisplayName": "Contact",
                    "LinkTo": "/contact",
                    "key": "Contact",
                  },
                  Object {
                    "DisplayName": "Messages",
                    "LinkTo": "/messages",
                    "key": "Messages",
                  },
                ]
              }
              selectItem={[Function]}
              toggleDrawer={[Function]}
            >
              <AppBar
                toggleDrawer={[Function]}
              >
                <div
                  className="appBar"
                >
                  <BasicButton
                    className="iconButton"
                    onClick={[Function]}
                  >
                    <div
                      className="iconButton"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="button"
                      tabIndex={0}
                    >
                      <FontAwesome
                        className="icon"
                        key=".0"
                        name="bars"
                      >
                        <span
                          aria-hidden={true}
                          className="fa fa-bars icon"
                        />
                      </FontAwesome>
                    </div>
                  </BasicButton>
                  <div
                    className="heading"
                  >
                    Coder Daily
                  </div>
                  <div
                    className="linkContainer"
                  >
                    Log In
                  </div>
                </div>
              </AppBar>
              <Drawer
                isDrawerOpen={false}
                itemKeyAttr="key"
                itemLabelAttr="DisplayName"
                items={
                  Array [
                    Object {
                      "DisplayName": "About Me",
                      "LinkTo": "/",
                      "key": "AboutMe",
                    },
                    Object {
                      "DisplayName": "Portfolio",
                      "LinkTo": "/portfolio",
                      "key": "Portfolio",
                    },
                    Object {
                      "DisplayName": "Contact",
                      "LinkTo": "/contact",
                      "key": "Contact",
                    },
                    Object {
                      "DisplayName": "Messages",
                      "LinkTo": "/messages",
                      "key": "Messages",
                    },
                  ]
                }
                selectItem={[Function]}
              >
                <styles__DrawerStyled
                  isDrawerOpen={false}
                >
                  <StyledComponent
                    forwardedClass={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": undefined,
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__DrawerStyled-fj1ofq-0",
                          "isStatic": false,
                          "lastClassName": "dRFtXm",
                          "rules": Array [
                            "position:fixed;top:0;left:",
                            [Function],
                            ";height:100%;width:300px;background:#fff;padding:0px;transition:0.25s ease-in-out;box-shadow:rgba(0,0,0,0.15) 0px 3px 10px,rgba(0,0,0,0.22) 0px 3px 10px;z-index:1000;&.drawerOpen{left:0;}",
                          ],
                        },
                        "displayName": "styles__DrawerStyled",
                        "render": [Function],
                        "styledComponentId": "styles__DrawerStyled-fj1ofq-0",
                        "target": "div",
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isDrawerOpen={false}
                  >
                    <div
                      className="styles__DrawerStyled-fj1ofq-0 dRFtXm"
                    >
                      <styles__ItemButtonStyled
                        key="AboutMe"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedClass={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": undefined,
                              "componentStyle": ComponentStyle {
                                "componentId": "styles__ItemButtonStyled-fj1ofq-1",
                                "isStatic": true,
                                "lastClassName": "lbhiYP",
                                "rules": Array [
                                  "padding:25px;text-transform:uppercase;cursor:pointer;border-bottom:solid 1px #f6f6f6;&:hover{background-color:#f6f6f6;}",
                                ],
                              },
                              "displayName": "styles__ItemButtonStyled",
                              "render": [Function],
                              "styledComponentId": "styles__ItemButtonStyled-fj1ofq-1",
                              "target": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <BasicButton
                            className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                            onClick={[Function]}
                          >
                            <div
                              className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              About Me
                            </div>
                          </BasicButton>
                        </StyledComponent>
                      </styles__ItemButtonStyled>
                      <styles__ItemButtonStyled
                        key="Portfolio"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedClass={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": undefined,
                              "componentStyle": ComponentStyle {
                                "componentId": "styles__ItemButtonStyled-fj1ofq-1",
                                "isStatic": true,
                                "lastClassName": "lbhiYP",
                                "rules": Array [
                                  "padding:25px;text-transform:uppercase;cursor:pointer;border-bottom:solid 1px #f6f6f6;&:hover{background-color:#f6f6f6;}",
                                ],
                              },
                              "displayName": "styles__ItemButtonStyled",
                              "render": [Function],
                              "styledComponentId": "styles__ItemButtonStyled-fj1ofq-1",
                              "target": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <BasicButton
                            className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                            onClick={[Function]}
                          >
                            <div
                              className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              Portfolio
                            </div>
                          </BasicButton>
                        </StyledComponent>
                      </styles__ItemButtonStyled>
                      <styles__ItemButtonStyled
                        key="Contact"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedClass={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": undefined,
                              "componentStyle": ComponentStyle {
                                "componentId": "styles__ItemButtonStyled-fj1ofq-1",
                                "isStatic": true,
                                "lastClassName": "lbhiYP",
                                "rules": Array [
                                  "padding:25px;text-transform:uppercase;cursor:pointer;border-bottom:solid 1px #f6f6f6;&:hover{background-color:#f6f6f6;}",
                                ],
                              },
                              "displayName": "styles__ItemButtonStyled",
                              "render": [Function],
                              "styledComponentId": "styles__ItemButtonStyled-fj1ofq-1",
                              "target": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <BasicButton
                            className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                            onClick={[Function]}
                          >
                            <div
                              className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              Contact
                            </div>
                          </BasicButton>
                        </StyledComponent>
                      </styles__ItemButtonStyled>
                      <styles__ItemButtonStyled
                        key="Messages"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedClass={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": undefined,
                              "componentStyle": ComponentStyle {
                                "componentId": "styles__ItemButtonStyled-fj1ofq-1",
                                "isStatic": true,
                                "lastClassName": "lbhiYP",
                                "rules": Array [
                                  "padding:25px;text-transform:uppercase;cursor:pointer;border-bottom:solid 1px #f6f6f6;&:hover{background-color:#f6f6f6;}",
                                ],
                              },
                              "displayName": "styles__ItemButtonStyled",
                              "render": [Function],
                              "styledComponentId": "styles__ItemButtonStyled-fj1ofq-1",
                              "target": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <BasicButton
                            className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                            onClick={[Function]}
                          >
                            <div
                              className="styles__ItemButtonStyled-fj1ofq-1 lbhiYP"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              Messages
                            </div>
                          </BasicButton>
                        </StyledComponent>
                      </styles__ItemButtonStyled>
                    </div>
                  </StyledComponent>
                </styles__DrawerStyled>
              </Drawer>
            </NavigationBody>
          </div>
        </Navigation>
      </Connect(Navigation)>
    </withSaga(Connect(Navigation))>
  </withReducer(withSaga(Connect(Navigation)))>
</Provider>
`;
